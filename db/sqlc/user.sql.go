// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
)

const createMeeting = `-- name: CreateMeeting :one
INSERT INTO meetings (
  in_time,
  in_meet
) VALUES (
  $1, $2
) RETURNING id, in_time, in_meet
`

type CreateMeetingParams struct {
	InTime string `json:"in_time"`
	InMeet bool   `json:"in_meet"`
}

func (q *Queries) CreateMeeting(ctx context.Context, arg CreateMeetingParams) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, createMeeting, arg.InTime, arg.InMeet)
	var i Meeting
	err := row.Scan(&i.ID, &i.InTime, &i.InMeet)
	return i, err
}

const getMeeting = `-- name: GetMeeting :one
SELECT id, in_time, in_meet FROM meetings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeeting(ctx context.Context, id int32) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, getMeeting, id)
	var i Meeting
	err := row.Scan(&i.ID, &i.InTime, &i.InMeet)
	return i, err
}

const getMeetingForUpdate = `-- name: GetMeetingForUpdate :one
SELECT id, in_time, in_meet FROM meetings
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMeetingForUpdate(ctx context.Context, id int32) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, getMeetingForUpdate, id)
	var i Meeting
	err := row.Scan(&i.ID, &i.InTime, &i.InMeet)
	return i, err
}

const listMeetings = `-- name: ListMeetings :many
SELECT id, in_time, in_meet FROM meetings
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMeetingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMeetings(ctx context.Context, arg ListMeetingsParams) ([]Meeting, error) {
	rows, err := q.db.QueryContext(ctx, listMeetings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Meeting{}
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(&i.ID, &i.InTime, &i.InMeet); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
